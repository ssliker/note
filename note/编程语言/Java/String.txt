1.关于字符串：
    1.java中并没有字符串类型的基本数据类型，只有字符类型的基本数据类型；
    2.java中提供了String类表示一个字符串，内部使用字符数组实现字符串字符存储；并且java支持字符串字面量，字符串字面量以""包裹，字符字面量则以''包裹；
    3.java中还提供了StringBuffer和StringBuilder表示字符串容器；

2.关于String类型：
    1.String表示一个字符串本身，内部使用字符数组存储字符串，字符数组长度等于字符串字符个数；
    2.String继承自CharSequence接口；
    3.String类型的字符串是一个不可变字符串，即由String创建的字符串不可修改，凡对String类型字符串修改的操作都是通过新创建一个字符串实现；
    4.String源码中重要的几个特征：
        1.存储字符串字符的字符数组被private和final修饰，是一个不可变量，即引用不可指向其他字符数组，并且不能在外部修改字符数组引用：private final char[] value;
        2.String类内部针对value数组的修改都是通过新创建字符串实现的；
        3.String类本身也被final修饰，不可以被继承，其中的方法不可以被重新；
        通过上述三步操作实现了字符串的不可变特征；

3.关于String类型的创建：
    1.创建空的String:
        String str = new String();
    
    2.创建被指定字符串初始化的String：
        String str = new String("tmpString");
        String str = "tmpString";
    
    3.通过字节数组创建String:
        String str = new String(byte[] bytes);    // 通过本地字符编码创建字符串
        String str = new String(byte[] bytes,"UTF-8");    // 通过指定字符编码创建字符串
    
    4.通过字符数组创建String:
        String str = new String(char[] chars)
        备注：
            1.内部通过拷贝字符数组内容实现String创建；
    
    5.通过StringBuffer创建String:
        String str = new String(StringBuffer sb)
        备注：
            1.内部通过拷贝字符数组内容实现String创建；
    
    6.通过StringBuilder创建String:
        String str = new String(StringBuilder sb)
        备注：
            1.内部通过拷贝字符数组内容实现String创建；
    
    7.通过其他CharSquenece创建String:
        String str = new String(CharSequence cs)
        备注：
            1.内部通过拷贝字符数组内容实现String创建；

4.关于String的处理(JDK自带)：
    1.获取长度：
        str.length();
        备注：
            1.空白字符也会当做正常字符串字符；
    
    2.检测字符串是否为空：
        str.isEmpty();
        备注：
            1.上述方法是通过检测字符串中字符个数是否为0实现的检测；
            2.空白字符也会当做正常字符串字符；

    3.获取指定位置字符：
        str.charAt(int index);
        备注：
            1.返回指定位置字符；
            2.注意index不能越界，否则将会报越界异常；
    
    4.返回字符在字符串中首次出现的位置：
        str.indexOf(char c)
        str.indexOf(char c, int index)
        备注：
            1.位置计数从0开始；
            2.index如果超过字符串长度，将会返回-1，不会报告异常；如果index为负值，则会忽略index;
    
    5.返回字符串在字符串中首次出现的位置：
        str.indexOf(String str)
        str.indexOf(String str, int index)
        备注：
            1.位置计数从0开始；
            2.index如果超过字符串长度，将会返回-1，不会报告异常；如果index为负值，则会忽略index;
    
    6.返回字符在字符串中末次出现的位置：
        str.lastIndexOf(char c)
        str.lastIndexOf(char c, int index)
        备注：
            1.位置计数从0开始；
            2.index如果超过字符串长度，将会返回-1，不会报告异常；如果index为负值，则会忽略index;

    7.返回字符在字符串中末次出现的位置：
        str.lastIndexOf(String str)
        str.lastIndexOf(String str, int index)
        备注：
            1.位置计数从0开始；
            2.index如果超过字符串长度，将会返回-1，不会报告异常；如果index为负值，则会忽略index;
    
    8.截取字符串：
        /*从起始位置beginIndex截取至字符串结尾*/
        string.substring(int beginIndex);
        /*从beginIndex截取至endIndex*/
        string.substring(int beginIndex, int endIndex); 
        备注：
            1.截取操作等同于使用String(char value[],int offset,int count)重新创建String对象，并返回新创建的String对象引用；
            2.如果beginIndex为0，且没设置endIndex的话，直接返回原字符串引用；
    
    9.连接字符串：
        1.str.concat(String str1):
        备注：
            1.该操作会重新创建一个String字符串，并将原字符串和新连接的字符串一并拷贝到新的String中；
        2.str+str1:
        备注：
            1.该操作在JDK1.5版本之后，会先将String转换为StringBuilder，然后调用StringBuilder的append方法将待追加的str追加至前置的字符串中；
            2.类似此种+连接的方式常见一下类型：
                1.两个字面量相连接："str"+"str1"    等同于直接定义的"strstr1"的字面量;
                2.字面量和变量相连接："str"+str1    等同于使用字面量"str"和变量str1新创建一个String对象；
                3.两个变量相连接：str+str1    等同于使用str和str1新创建一个String对象；
    10.替换字符串中的字符：
        str.replace(char cAim, char cReplace);
        备注:
            1.该操作将会全部替换caim为cReplace;
            
        str.replace(Charsequence strAim, CharSequence strReplace);
        备注：
            1.该操作将会全部替换strAim为strReplace;

        str.replaceAll(String strAim, String strReplace);
        备注：
            1.该操作将会全部替换strAim为strReplace;

        str.replaceFirst(String strAim, String strReplace);
        备注：
            1.该操作只会将首个strAim替换为strReplace;

    11.转换大小写：
        string.toUpperCase()
        string.toLowerCase()
    
    12.获取字符数组：
        string.toCharArray()
        备注：
            1.该操作并非直接返回String对象的value属性值，而是会通过拷贝的方式新创建字符数组；

    13.获取字节数组：
        string.getBytes()
        备注：
            1.该操作并非直接返回String对象的value属性值，而是会通过拷贝的方式新创建字节数组；
            2.默认使用ISO-8859-1字符编码，也可以手动指定字符编码，推荐实际使用时手动指定字符编码；
    14.清理字符串两侧空格：
        string.trim()
        备注：
            1.该操作通过调用substring方法实现；
            2.由于其通过substring实现，因此当没有空白字符需要被剔除时，将会返回原字符串引用，如果有空白字符需要被剔除时返回新的String字符串引用；

    15.将其他基本数据类型转换为字符串：
        String.valueOf();
    
    16.分隔字符串为子字符串：
        String[] string.split(String regex)
        String[] string.split(String regex, int limit)
    
    17.合并String、StringBuufer、StringBuilder为字符串：
        String.join(CharSequence delimiter,Iterable<? extends CharSequence> elements)
        String.join(CharSequence delimiter, CharSequence... elements)
        说明：该操作通过StringBuilder的append方法实现；
    
    19.检测字符串是否以指定子串开头：
        string.startsWith(String prefix)
        string.startsWith(String prefix, int offset)

    20.检测字符串是否以指定子串结尾：
        string.endsWith(String suffix)
        string.endsWith(String suffix, int offset)
    
    21.检测两个字符串对象是否相等：
        string.equals(Object anObject);     
        说明：
            1.anObject必须是String类型的对象；
            2.String重写了equals方法，只比较两个字符串序列是否相同，相同即返回true，否则返回false,等价于运算符号：=;
            3.如果在String和StringBuffer、StringBuilder检测是否相等时需要使用：string.contentEquals(charSequence cs)方法；
            4.此种方式确定是否相等时会严格区分大小写，避免区分大小写可以使用：string.equalsIgnoreCase(String anotherString)；

    22.比较两个字符串大小(字符序列在字符集中的码值大小)：
        string.compareTo(String anotherString)
        说明：
            1.如果当前字符串较大，返回大于0的数，相等返回0，小于返回负数；
            2.此种比较方式会严格区分大小写比较，如果需要忽略大小写比较可以使用：string.compareToIgnoreCase()；

5.String处理(apache commons lang:StringUtils):  
    1.StringUtils用来处理String类型的对象；
    
    
